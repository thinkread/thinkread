[{"title":"随笔","date":"2016-03-29T08:02:01.000Z","path":"2016/03/29/随笔/","text":"坚持记录一步一脚印回头看脚印感慨时光的飞逝","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"设计模式六大原则","date":"2014-01-29T02:29:02.000Z","path":"2014/01/29/设计模式六大原则/","text":"#1、开闭原则（Open Close Principle）# 开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。 #2、里氏代换原则（Liskov Substitution Principle）# 里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科 #3、依赖倒转原则（Dependence Inversion Principle）# 这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。 #4、接口隔离原则（Interface Segregation Principle）# 这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。 #5、迪米特法则（最少知道原则）（Demeter Principle）# 为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。 #6、合成复用原则（Composite Reuse Principle）# 原则是尽量使用合成/聚合的方式，而不是使用继承。","tags":[{"name":"/设计模式","slug":"设计模式","permalink":"http://yoursite.com/tags/设计模式/"}]},{"title":"工厂模式","date":"2014-01-28T02:04:22.000Z","path":"2014/01/28/工厂模式/","text":"工厂模式工厂模式就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建. 举例如下：（我们举一个发送邮件和短信的例子） 首先，创建二者的共同接口： public interface Sender { public void Send(); } 创建实现类 public class MailSender implements Sender { @Override public void Send() { System.out.println(“this is mailsender!”); } } ​ public class SmsSender implements Sender { @Override public void Send() { System.out.println(“this is sms sender!”); } } 最后，建工厂类： public class SendFactory { public Sender produce(String type) { if (“mail”.equals(type)) { return new MailSender(); } else if (“sms”.equals(type)) { return new SmsSender(); } else { System.out.println(“请输入正确的类型!”); return null; } } } 测试 public class FactoryTest { public static void main(String[] args) { SendFactory factory = new SendFactory(); Sender sender = factory.produce(“sms”); sender.Send(); } } 输出：this is sms sender!","tags":[{"name":"/设计模式","slug":"设计模式","permalink":"http://yoursite.com/tags/设计模式/"}]},{"title":"设计模式分类","date":"2014-01-28T02:01:04.000Z","path":"2014/01/28/设计模式工厂模式/","text":"创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。 结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。 行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。","tags":[{"name":"/设计模式","slug":"设计模式","permalink":"http://yoursite.com/tags/设计模式/"}]}]